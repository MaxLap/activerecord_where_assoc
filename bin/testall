#!/usr/bin/env ruby
# frozen_string_literal: true

#
# Will run rake test on every ruby version you have installed that matches the .travis-ci.yml
# If you want to test on something else than SQLite3, specify the DB=pg or DB=mysql before calling it.
#
# This is a script that does basically what wwtd is meant to do (run tests following
# the config in travis-ci), but:
#  * ignores the scripts and the envs which are meant for travis
#  * only runs rake test with the specified database
#  * ignores rails_head and ruby-head
#  * Way simpler
#
# Other differences from wwtd:
#  * automatically installs the bundler gem if it is missing from a ruby version.
#
require "English"
require "term/ansicolor"
require "yaml"
TRAVIS_CONFIG = ".travis.yml".freeze

def run_command(env_vars, command)
  puts "RUNNING: #{command}  WITH: #{env_vars}"
  system(env_vars, command)
end

travis_yml = (File.exist?(TRAVIS_CONFIG) ? YAML.load_file(TRAVIS_CONFIG) : {})
ruby_versions = travis_yml["rvm"] || []
gemfiles = travis_yml["gemfile"] || [nil]
matrix_options = travis_yml["matrix"] || {}
matrix_include = matrix_options["include"] || []
matrix_exclude = matrix_options["exclude"] || []

configs = ruby_versions.product(gemfiles)
matrix_include.each do |conf|
  configs << [conf["rvm"], conf["gemfile"] || nil]
end
matrix_exclude.each do |conf|
  configs.delete [conf["rvm"], conf["gemfile"] || nil]
end

rubies = {}
results = []

`which rvm`
has_rvm = $CHILD_STATUS.success?
`which chruby-exec`
has_chruby = $CHILD_STATUS.success?

if has_rvm
  ruby_exec = "rvm-exec %{ruby_version} "
elsif has_chruby
  ruby_exec = "chruby-exec %{version} -- "
else
  abort("Couldn't find either rvm or chruby")
end

configs.each do |ruby_version, gemfile|
  next if ruby_version == "ruby-head"

  current_ruby_exec = format(ruby_exec, ruby_version: ruby_version)

  env_vars = { "BUNDLE_GEMFILE" => gemfile, "WITHOUT_PENDING" => ENV["WITHOUT_PENDING"] || "1" }
  gemfile_text = gemfile || "Default gemfile"
  success = true

  if !rubies.include?(ruby_version)
    `#{current_ruby_exec} ruby -v`
    has_ruby_version = $CHILD_STATUS.success?
    if has_ruby_version
      if !system("#{current_ruby_exec} gem list -i '^bundler$' 1>/dev/null")
        success &&= run_command(env_vars, "#{current_ruby_exec} gem install bundler")
      end
      rubies[ruby_version] = true
    else
      rubies[ruby_version] = false
    end
  end

  if rubies[ruby_version] == false
    results << Term::ANSIColor.yellow("MISING RUBY: #{ruby_version} for #{gemfile_text}")
    next
  end

  if success
    bundle_installed = run_command(env_vars, "#{current_ruby_exec} bundle check 1>/dev/null 2>&1")
    bundle_installed ||= run_command(env_vars, "#{current_ruby_exec} bundle install --quiet 1>/dev/null 2>&1")
    bundle_installed ||= run_command(env_vars, "#{current_ruby_exec} bundle update --quiet")
    success &&= bundle_installed
  end
  success &&= run_command(env_vars, "#{current_ruby_exec} bundle exec rake test") if success

  if success
    results << Term::ANSIColor.green("SUCCESS: #{ruby_version} for #{gemfile_text}")
  else
    results << Term::ANSIColor.red("FAILURE: #{ruby_version} for #{gemfile_text}")
  end
end

puts results
