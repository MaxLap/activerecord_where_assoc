var search_data = {"index":{"searchIndex":["activerecordwhereassoc","relationreturningmethods","sqlreturningmethods","assoc_exists_sql()","assoc_not_exists_sql()","compare_assoc_count_sql()","only_assoc_count_sql()","where_assoc_count()","where_assoc_exists()","where_assoc_not_exists()"],"longSearchIndex":["activerecordwhereassoc","activerecordwhereassoc::relationreturningmethods","activerecordwhereassoc::sqlreturningmethods","activerecordwhereassoc::sqlreturningmethods#assoc_exists_sql()","activerecordwhereassoc::sqlreturningmethods#assoc_not_exists_sql()","activerecordwhereassoc::sqlreturningmethods#compare_assoc_count_sql()","activerecordwhereassoc::sqlreturningmethods#only_assoc_count_sql()","activerecordwhereassoc::relationreturningmethods#where_assoc_count()","activerecordwhereassoc::relationreturningmethods#where_assoc_exists()","activerecordwhereassoc::relationreturningmethods#where_assoc_not_exists()"],"info":[["ActiveRecordWhereAssoc","","ActiveRecordWhereAssoc.html","","<p>See RelationReturningMethods\n"],["ActiveRecordWhereAssoc::RelationReturningMethods","","ActiveRecordWhereAssoc/RelationReturningMethods.html","","<p>This module adds new variations of <code>#where</code> to your Models/relations/associations/scopes. These variations …\n"],["ActiveRecordWhereAssoc::SqlReturningMethods","","ActiveRecordWhereAssoc/SqlReturningMethods.html","","<p>The methods in this module return partial SQL queries. These are used by the main methods of this gem: …\n"],["assoc_exists_sql","ActiveRecordWhereAssoc::SqlReturningMethods","ActiveRecordWhereAssoc/SqlReturningMethods.html#method-i-assoc_exists_sql","(association_name, conditions = nil, options = {}, &block)","<p>This method returns a string containing the SQL condition used by RelationReturningMethods#where_assoc_exists …\n"],["assoc_not_exists_sql","ActiveRecordWhereAssoc::SqlReturningMethods","ActiveRecordWhereAssoc/SqlReturningMethods.html#method-i-assoc_not_exists_sql","(association_name, conditions = nil, options = {}, &block)","<p>This method generates the SQL query used by RelationReturningMethods#where_assoc_not_exists. This method …\n"],["compare_assoc_count_sql","ActiveRecordWhereAssoc::SqlReturningMethods","ActiveRecordWhereAssoc/SqlReturningMethods.html#method-i-compare_assoc_count_sql","(left_assoc_or_value, operator, right_assoc_or_value, conditions = nil, options = {}, &block)","<p>This method returns a string containing the SQL condition used by RelationReturningMethods#where_assoc_count …\n"],["only_assoc_count_sql","ActiveRecordWhereAssoc::SqlReturningMethods","ActiveRecordWhereAssoc/SqlReturningMethods.html#method-i-only_assoc_count_sql","(association_name, conditions = nil, options = {}, &block)","<p>This method returns a string containing the SQL to count an association used by RelationReturningMethods#where_assoc_count …\n"],["where_assoc_count","ActiveRecordWhereAssoc::RelationReturningMethods","ActiveRecordWhereAssoc/RelationReturningMethods.html#method-i-where_assoc_count","(left_assoc_or_value, operator, right_assoc_or_value, conditions = nil, options = {}, &block)","<p>Returns a new relation with a condition added (a <code>#where</code>) that checks how many records an association …\n"],["where_assoc_exists","ActiveRecordWhereAssoc::RelationReturningMethods","ActiveRecordWhereAssoc/RelationReturningMethods.html#method-i-where_assoc_exists","(association_name, conditions = nil, options = {}, &block)","<p>Returns a new relation with a condition added (a <code>#where</code>) that checks if an association of the model exists. …\n"],["where_assoc_not_exists","ActiveRecordWhereAssoc::RelationReturningMethods","ActiveRecordWhereAssoc/RelationReturningMethods.html#method-i-where_assoc_not_exists","(association_name, conditions = nil, options = {}, &block)","<p>Returns a new relation with a condition added (a <code>#where</code>) that checks if an association of the model does …\n"]]}}